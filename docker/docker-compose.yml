services:
  postgres:
    image: postgres:15-alpine
    container_name: quotebot-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-quotebot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-quotebot123}
      POSTGRES_DB: ${POSTGRES_DB:-quotebot}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-quotebot} -h 127.0.0.1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      quotebot-network:
        aliases: [ postgres ]
    hostname: postgres

  redis:
    image: redis:7-alpine
    container_name: quotebot-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redis123}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis123}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      quotebot-network:
        aliases: [ redis ]
    hostname: redis

  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: quotebot/app:local
    container_name: quotebot-app
    restart: unless-stopped
    env_file:
      - ./.env
    environment:
      # Construct from POSTGRES_*/REDIS_* so there's only ONE source of truth.
      DATABASE_URL: postgresql://${POSTGRES_USER:-quotebot}:${POSTGRES_PASSWORD:-quotebot123}@postgres:5432/${POSTGRES_DB:-quotebot}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      # Optional: pass through other app settings from .env as needed
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      DIFY_API_KEY: ${DIFY_API_KEY:-app-your-dify-api-key-here}
      DIFY_API_URL: ${DIFY_API_URL:-https://quotebot.tablazat.hu/v1}
      DIFY_TIMEOUT: ${DIFY_TIMEOUT:-30}
      TABLAZAT_CALLBACK_URL: ${TABLAZAT_CALLBACK_URL:-https://tablazat.hu/api/quotebot/result}
      TABLAZAT_CALLBACK_TIMEOUT: ${TABLAZAT_CALLBACK_TIMEOUT:-10}
      TABLAZAT_CALLBACK_MAX_RETRIES: ${TABLAZAT_CALLBACK_MAX_RETRIES:-3}
      CORS_ORIGINS: ${CORS_ORIGINS:-["https://tablazat.hu","http://localhost:3000","http://localhost:8080"]}
      CONVERSATION_TTL: ${CONVERSATION_TTL:-86400}
      MAX_CONVERSATION_MESSAGES: ${MAX_CONVERSATION_MESSAGES:-100}
      RATE_LIMIT_PER_MINUTE: ${RATE_LIMIT_PER_MINUTE:-60}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      COMPLETION_KEYWORDS: ${COMPLETION_KEYWORDS:-["thank you for providing all the information","we'll send you a quote","our team will contact you","conversation complete"]}
      REQUIRED_FIELDS: ${REQUIRED_FIELDS:-["customer_name","customer_email","product_type"]}
      SENTRY_DSN: ${SENTRY_DSN:-}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quotebot-network
    entrypoint: [ "uvicorn", "main:app", "--host","0.0.0.0","--port","8000","--workers","1" ]
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:

networks:
  quotebot-network:
    driver: bridge
